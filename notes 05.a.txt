// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Controlled Element
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
 
 // onSubmit VS onClick
 onSubmit = validation click bouton ET en cliquant sur entrée dans l'input
 onClick = validation ONLY click button

// Manière de procéder en Vanilla JS
e.preventdefault()
console.log(e)         target > input > value          e.target[1].value

En React, pour les Forms, on n'utilise pas cette façon de faire

// Le problème du DOM...
En Vanilla, les valeurs d'input/select sont dans le DOM
Problème : difficulté à lire les valeurs, et gérer disparition/modifications
Ce n'est pas l'idéal...



Nous souhaitons avoir tous nos States centralisés dans notre App React,
et pas à l'intérieur du DOM !
Pour cela, avec React, on utilise une technique nommée Controlled Elements.



3 étapes :
    1 - Piece of State > State Hook > Define value > import State
    2 - dans element qu'on veut controler (input/select)  value={state}
    3 - puis,               onChange={(e)=> setState(e.target.value)}

PS : target.value = String
Penser à Number()

PS 2 : Dans un onChange / onClick, SI volonté de fonction 
    => faire une fonction flechée pour éviter le lancement automatique de la fonction !



Pour récapituler :
1 - On crée notre Piece of State
2 - Dans l'élément qu'on veut controler, on "force" pour qu'il prenne toujours en value notre variable de State (puis les values qui seront Setter)
3 - Enfin, on Update notre variable de State avec son Setter, en prenant sa e.target.value sur chaque onChange (ce qui modifiera la State initiale dans Value)

Avec tout ça, React se charge réellement du State et de l'élément entièrement, sans qu'on ait à trifouiller dans le DOM.


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    STATE vs PROPS
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

State :
- Data interne, possédée par le Composant, dans lequelle elle est déclarée
- "Mémoire de Composant"
- Update par le Composant lui-même (qui entraine un Re-Render)

Props :
- Data externe, possédée par un Composant Parent
- Similaire à "un paramètre de fonction"
- Data reçue, car transmise du Composant Parent vers l'Enfant
- Read Only : ne peut pas être modifiée par le Composant Enfant qui la reçoit !!
- SURPRISE : Recevoir de nouvelles Props cause un Re-Render (Généralement quand le State Parent a été modifié)
- Utilisés par les Parents pour configurer les Composants Enfants (settings)

Les Props peuvent être vu comme des settings de Composants Enfants que les Composants Parents définissent comme ils le souhaitent.