// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Component, Component Instance, and React Element
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Composant :
    - Une description d'un morceau de l'UI
    - Un Template / Blueprint
    - C'est une fonction qui return un React Element (element tree)
        (généralement écrit en JSX)


Component Instance :
    - créé lorsqu'on "utilise" le Composant
    - React appelle en interne le Composant
    - C'est la manifestation "physique" de notre Composant
        (vivant dans le Component Tree)
    - Possède ses propres States / Props
    - Possède son cycle de vie (naît, vit, et meurt)
        (un peu comme un organisme vivant)


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Savoir être précis : ne jamais omettre l'instance de Composant
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

    - cycle de vie d'un Composant = cycle de vie d'une INSTANCE de Composant
    - une UI est faite de Composants = une UI est faite d'INSTANCE de Composants


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    JSX  >  React.createElement()  >  React Element
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

1 - Le JSX du Composant est convertit en plusieurs function React.createElement()
2 - Puis React appelle ces function React.createElement()
3 - Ce qui créera des React Elements

Un React Element = le simple fait d'écrire un Composant 

Pour résumer un React Element :
    - c'est le résultat des appels de fonctions (React.createElement)
    - c'est un gros object JavaScript immutable que React garde en mémoire

Mais que contient ce gros Object JS ?
TOUTES les infos nécessaires pour créer les Element Dom de cette Instance de Composant


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    React Element (inseré dans le DOM) >  DOM Element (html)
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

potentiel conversion > Affichage à l'ecran dans le navigateur

Les DOM Elements sont :
    l'actuelle représentation visuelle FINALE de l'instance du Composant
        dans le navigateur

ATTENTION : Ce n'est pas le React Element qui est Render dans le DOM

Les React Elements vivent dans l'App React et ne font rien avec le DOM
ils sont simplement convertit en DOM Element quand ils sont affichés sur écran

// à préciser



// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Instances et Elements           $$$type of : Symbol
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Possibilité de voir ce que contient une instance avec un console.log()
    console.log( <ComposantName /> )
    console.log( ComposantName() )

On aura toujours un React.element mais, le deuxieme exemple fera en sorte de :
    - montrer uniquement le type brut (div, etc)
    - modifier la ligne des Props

De ce fait : 
    - React ne pas cela comme une instance de Composant
    - À la place, il voit ça comme un React Element brut

Ce n'est pas ce que nous voulons !

Imaginons utiliser la fonction() plutot que l'instance de Composant
Ses Hooks seront apparants, mais n'appartiendront à aucun Composant...
Donc, impossible de manager ses propres States = ce n'est pas un Composant.

On "utilise un Composant" pour que React le voit comme une instance de Composant
(et pas comme un output element brut)
Et donc, il n'existera pas dans l'Arbre de Composants !

Pour toutes ces raisons, nous pouvons conclure : 
    - ne jamais faire utiliser les fonctions de Composants à la place d'Instances
    - cela nous évitera les problèmes et "violations" des règles de Hooks
    - placer les instances dans du JSX pour être vu en tant que Compo Instances



// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Rendering Process
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

1 - Le Render est déclenché 
    par un update de State par exemple

2 - Le Render Phase
    - React appelle la function de Composant
    - React comprend donc comment le DOM doit être Update

3 - Le Commit Phase
    React écrit dans le DOM : Update, insert, et/ou supprime des éléments

4 - Affichage dans le navigateur

Dans React :
    - Le Rendering n'Update pas le DOM, et n'affiche rien de particulier à l'écran
    - Le Rendering se passe uniquement à l'intérieur de React, sans modif visuel



// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    2 situations qui font un Trigger Render
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

    1 - L'initial Render d'une App
    2 - L'Update d'un State, dans un ou plusieurs Instances de Composants (Re-Render)

Le Processus de Render se déclenche dans l'Application toute entière
Mais ça ne veut pas dire que le DOM tout entier est Update

En pratique :
    On dirait que React Re-Render uniquement le Composant où le State est Update
    mais ce n'est pas ce qui se passe "derrière la scene"

Une précision :
    Les Renders ne sont pas déclenchés immédiatement après un State Update,
    mais programmés quand le moteur JavaScript aura du temps libre (en millisecondes)

    Il y a aussi des cas de figure, comme plusieurs setState dans la même function,
    où les Render seront regroupés dans le gestionnaire d'event