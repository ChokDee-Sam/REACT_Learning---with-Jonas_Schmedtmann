utiliser handleXXX pour nommer une action

Utiliser les camelCases en JSX
    onclick en HTML devient onClick en JSX

// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    LES STATES
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Le State est le concept le plus important de React.



// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Qu'est-ce qu'un State ?
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    C'est une Data qu'un composant peut "garder" dans le temps.
    Nécessairement utilisé pour que le Composant se souvienne d'informations 
    dont il a besoin durant la durée de vie de l'App.
        Mémoire de Composant (Component's Memory)

    State Variable / Piece of State
        Une variable dans un composant
    
    Le terme State réunis l'ensemble de tous les "Piece of State"

    La modification d'un State déclenche le re-Render d'un Composant dans l'UI
        se qui déchenche un nouveau (mise à jour) "Component View"
        PS : un Component View est juste le rendu visuel du composant à l'écran

    Un Render de composant est une vue
    Toutes les vues combinées

    Le State se résume à :
        Comment React conserve l'interface utilisateur en synchronisation avec la Data
        Changer le State = Changer l'UI



// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

1 - Ajout d'une nouvelle variable de State
2 - L'utiliser dans le Code (généralement du JSX)
3 - Puis Update le Piece of State dans certains Event Handler

const arr = useState(1)
Écrire useState déclenche automatiquement la ligne d'import de la fonction UseState
De ce fait, on défini un argument de départ dans cet appel de fonction
    (default value State variable)


Lorsqu'on console.log useState(valeurChoisi), on y voit un tableau avec 
    - En premier : notre valeur choisi
    - En second : une fonction qui mettra à jour notre variable State

De ce fait, on fait immédiatement un Destructuring
        const step = 1
        const [step, setStep ]

Et ensuite, pour modifier la variable du State par défaut, on utilise la fonction setStep
JAMAIS MANUELLEMENT !
        function ajout() {
            setStep(step+1)
            }

On peut écrire proprement, avec la valeur de base de step (sans variable comme précédemment)
  const [step, setStep] = useState(1);


Les Hooks commencent tous par use...
Et doivent tous être utilisés au top de notre Composant
JAMAIS APRÈS, et encore moins à l'intérieur d'autre chose


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    REACT = immuabilité et Fonctional State Update
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Ne jamais muter/updater une variable sans son Setter.
    Toujours voir le State comme une valeur immuable si on veut le modifier nous-même !
    Et si on souhaite le modifier, ce ne sera pas nous même, mais avec les outils de React.
    Donc ici, ce sera avec une Setter Function.

  function handleFunction() {
    setStep(step + 1);
  }

// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Pourquoi on en a besoin ?
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    1 - Permet de mettre à jour la Vue du Composant (avec un re-Render du Composant)
        Ce qui donne un moyen de modifier une seule partie de l'UI

    2 - Conserve les variables locales entre plusieurs Render


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Comment utiliser un State ?
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    - useState
    - useReducer
    - context API



// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Penser au State :
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    - Quand l'utiliser ?
    - Où le placer ?
    - Les types de States



// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Updating State based on Current State
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
TOUJOURS utiliser un Callback      (pour éviter des bugs)
Update un State basé sur la Current Value State :
    
GOOD PRACTICE
    if (step > 1) setStep((s) => s - 1);

BAD Practice :
    if (step > 1) setStep(step - 1); 

GOOD PRACTICE
    onClick={() => setIsOpen((is) => !is)}

BAD PRACTICE
    onClick={() => setIsOpen(!isOpen)}


PS : Si la modification du State n'a pas besoin de prendre en compte la current Value State
        > possibilité de changer sans fonction Callback
 



// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    La Philosophie UI
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Une State est isolé des autres composants (même similaires)
Si on update un State dans un Composant : ça ne modifie pas les autres Composants Similaire

L'UI est une sorte de fonction de State
La Vue de l'UI est le reflet de la Data changeante dans le temps
De ce fait, on décrit le reflet de la Data avec des States, des events handlers, et du JSX


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    State Guidelines
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Utiliser une variable State pour que le composant doive s'en souvenir dans le temps.
Cette Data changera à certains points.
(Un peu comme une variable Let en JavaScript, ou un tableau/objet mis à jour)

Quand on veut une "chose" dynamique dans un Composant, on crée un "Piece of State"
en rapport à cette "chose"
    puis on modifie la State quand cette chose doit changer (aka "be dynamic")

Si on souhaite changer le look d'un Composant, ou la Data qu'il affiche : Update State.
Cet Update se fait généralement avec un Event Handler.

Au moment de construire un Composant :
    Imaginer que la Vue est le reflet d'un State qui change à travers le temps.


PS : Attention à ne pas tout mettre en State !
Une Data qui doit Re-Render = State
Une Data qui ne doit pas Re-Render = une variable