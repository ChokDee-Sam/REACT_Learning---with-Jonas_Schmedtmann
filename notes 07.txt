// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
//  Découpe de Composants
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Composant trop grand ou trop petit = mauvaise pratique

En cas de doute : 
    Commencer par un Composant relativement grand,
        puis découper en plus petit Composants si nécessaire.

PS : On est sur de devoir réutiliser un élément? Alors GO !


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
//  Process de questionnement
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Process :
1 - Separation logique du contenu / du layout
2 - Réutilisation
3 - Responsabilités / complexité (beaucoup de States)
4 - Coding style personnel


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
//  Réfléxion de chaque étape du process :
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

1 - Le Composant contient des éléments de contenu ou de layout qui ne vont pas ensemble ?

2 - Est-il possible de réutiliser un morceau de ce Composant ?
    Est-ce que tu as envie, ou un besoin de réutiliser ce morceau de Composant ?

3 - Est-ce que ton Composant  :
        - fait beaucoup de choses différentes ?
        - est relié à trop de Props ?
        - a trop de States et/ou d'effets ?
        - a un code trop complexe, trop confus ?

4 - Tu preferes des Composants/Functions plus grands / plus petits ?


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
//  Conseils pratiques
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

    - Créer de nouveaux Composants =  new Abstractions = basculer avant/arrière = coût en energie
    - Nommer un Composant en fonction de ce qu'il fait, et/ou, de ce qu'il affiche (nom long : ok)

    - Ne jamais déclarer un New Composant dans un autre Composant

    - Co-localiser des Composant connexe dans le même fichier
    - Ne pas les séparer dans différents fichiers trop tôt
    

// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
//  Les 3 tailles de Composants
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

    il est normal qu'une App possède des Composants de différentes tailles 
        (autant des très petits, que des très grands)

Petit Composant :
    - très réutilisable
    - peu complexe
    - souvent nécessaire

Grand Composant :
    - peu réutilisable
    - Ne signifie pas forcément une réutilisation (aucun probleme)

Composant moyen :
    - différents degrés de tailles, de réutilisation, de responsabilités, et complexité

Une App aura donc des tailles de Composants "naturellement" différents.


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    2 Catégories
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Pour simplifier les 2 grandes catégories de Composants, 
    on pourrait dire qu'il y a les :

- Stateless Component / Presentation Components
- State Components


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Prop Drilling
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Prop Drilling = Faire passer une Prop à travers plusieurs éléments enfants imbriqués, dans le but de donner cette Prop à un Composant enfant imbriqué en profondeur.

La conséquence de tout ça, c'est qu'un grand nombre d'éléments se retrouvent avec cette Prop dont ils n'ont pas besoin. Ils servent de "relais" juste pour que la Prop aille en profondeur dans notre Arbre de Composants.

Ce n'est pas toujours la meilleure solution, surtout si on doit passer la Prop a de nombreux niveaux de profondeur dans nore Arbre.

Il existe une solution pour éviter des cas de Prop Drilling complexes ("out of control")


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Component Composition
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Plutot que d'utiliser un Composant imbriqué dans un autre
    On imbrique cette fois ci un {Children}, qui nous permettra de mettre tout ce que l'on souhaite, sans avoir à le définir en avance.

On nomme ça : Composant Composition, 
car celui-ci combine différents Composants utilisant la Prop Children
(ou des Props bien définies explicitement)

Avantages :
    - Crée des Composants/{Children} très réutilisables, et très fléxibles
    - Règle les problèmes de Prop Drilling complexes (great for layout)
        => les Composants n'ont pas besoin de connaitre leurs Children en avance

Super pour les Layouts :
Les Components Composition n'ont pas besoin de connaitre leur Children en avance
    => Ce qui permet de laisser un champs vide dispo (à l'intérieur du Children)

