// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
//  Découpe de Composants
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Composant trop grand ou trop petit = mauvaise pratique

En cas de doute : 
    Commencer par un Composant relativement grand,
        puis découper en plus petit Composants si nécessaire.

PS : On est sur de devoir réutiliser un élément? Alors GO !


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
//  Process de questionnement
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Process :
1 - Separation logique du contenu / du layout
2 - Réutilisation
3 - Responsabilités / complexité (beaucoup de States)
4 - Coding style personnel


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
//  Réfléxion de chaque étape du process :
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

1 - Le Composant contient des éléments de contenu ou de layout qui ne vont pas ensemble ?

2 - Est-il possible de réutiliser un morceau de ce Composant ?
    Est-ce que tu as envie, ou un besoin de réutiliser ce morceau de Composant ?

3 - Est-ce que ton Composant  :
        - fait beaucoup de choses différentes ?
        - est relié à trop de Props ?
        - a trop de States et/ou d'effets ?
        - a un code trop complexe, trop confus ?

4 - Tu preferes des Composants/Functions plus grands / plus petits ?


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
//  Conseils pratiques
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

    - Créer de nouveaux Composants =  new Abstractions = basculer avant/arrière = coût en energie
    - Nommer un Composant en fonction de ce qu'il fait, et/ou, de ce qu'il affiche (nom long : ok)

    - Ne jamais déclarer un New Composant dans un autre Composant

    - Co-localiser des Composant connexe dans le même fichier
    - Ne pas les séparer dans différents fichiers trop tôt
    

// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
//  Les 3 tailles de Composants
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

    il est normal qu'une App possède des Composants de différentes tailles 
        (autant des très petits, que des très grands)

Petit Composant :
    - très réutilisable
    - peu complexe
    - souvent nécessaire

Grand Composant :
    - peu réutilisable
    - Ne signifie pas forcément une réutilisation (aucun probleme)

Composant moyen :
    - différents degrés de tailles, de réutilisation, de responsabilités, et complexité

Une App aura donc des tailles de Composants "naturellement" différents.


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    2 Catégories
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Pour simplifier les 2 grandes catégories de Composants, 
    on pourrait dire qu'il y a les :

- Stateless Component / Presentation Components
- State Components


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Prop Drilling
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Prop Drilling = Faire passer une Prop à travers plusieurs éléments enfants imbriqués, dans le but de donner cette Prop à un Composant enfant imbriqué en profondeur.

La conséquence de tout ça, c'est qu'un grand nombre d'éléments se retrouvent avec cette Prop dont ils n'ont pas besoin. Ils servent de "relais" juste pour que la Prop aille en profondeur dans notre Arbre de Composants.

Ce n'est pas toujours la meilleure solution, surtout si on doit passer la Prop a de nombreux niveaux de profondeur dans nore Arbre.

Il existe une solution pour éviter des cas de Prop Drilling complexes ("out of control")


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Component Composition       { children }
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Plutot que d'utiliser un Composant imbriqué dans un autre
    On imbrique cette fois ci un {Children}, qui nous permettra de mettre tout ce que l'on souhaite, sans avoir à le définir en avance.

On nomme ça : Composant Composition, 
car celui-ci combine différents Composants utilisant la Prop Children
(ou des Props bien définies explicitement)

Avantages :
    - Crée des Composants/{Children} très réutilisables, et très fléxibles
    - Règle les problèmes de Prop Drilling complexes (great for layout)
        => les Composants n'ont pas besoin de connaitre leurs Children en avance

Super pour les Layouts : On peut "mieux" voir la composition de notre App.

Les Components Composition n'ont pas besoin de connaitre leur Children en avance
    => Ce qui permet de laisser un champs vide dispo (à l'intérieur du Children)



Le Composant qui déclare des enfants 
    = généralement ne change pas (Présentation, ou même avec State)
    = n'a plus besoin de passer des Props sans les utiliser (Drilling)
    = devra faire un State Lift si besoin



// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Passer un Element en tant que Prop  (alternative au Children)
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

1.  Créer une Prop 
2.  Y mettre notre JSX (donc même des Composants)
3.  Recevoir la Prop chez le Composant Enfant

Cette manière est utilisé dans certaines Librairie (par exemple, React Router)
C'est un Pattern viable dans le cas où nous devons :
    - "passer" de multiples éléments
    - et leur donner des noms différents

Le cas pratique parfait, c'est :
    - utiliser un Prop Element, 
    - ou tout autre Prop avec un autre nom
        => Au lieu d'un Prop Children implicite.


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

- Composant Parent : Passer un onClick avec une fonction
- Composant Enfant : Récupérer le onClick

Évite de passer plein de Props (const + Setter + index, etc...)


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Détail de la création des Stars
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

1 - Création d'un State 
    Celui ci recevra le numéro index (i) (généré lors du map de nos étoiles)

2 - Création d'une function qui récupèrera l'index cliqué dans le Setter

3 - Création d'une sorte de map, avec un Array.from(), avec 2 arguments :
    - la longueur (définie ou non)
    - et un (_,i)
    Cela nous donnera une sorte de .map avec une longueur et des index

4 - Dans ce pseudo-map, on y met notre composant Star, avec :
    - sa key
    - sa fonction handleClick à transmettre (qui va Setter le State avec l'index)
    - et une condition qui fera en sorte de comparé la valeur du State afin de choisir :
        - soit une étoile pleine (true = condition complete)
        - soit une étoile vide (false : condition incomplete, pour les étoiles suivantes)
    résumé : Le State >= i+1 ? condition remplie = Étoile pleine, et ensuite Étoile vides
  
5 - Récupérer dans le composant :
    - la fonction dans un onClick ou autre
    - et la condition qui retournera true ou false, afin de faire une Condition en JSX    
  

// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Création des Stars : onMouseEnter / onMouseLeave (video 117)
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

1 - Création d'un nouveau State (tempRating)

2 - Création de 2 nouvelles Props dans Star qui Add et Reset les Star
    - onHoverIn={() => setTempRating(i + 1)}
    - onHoverOut={() => setTempRating(0)}

3 - Recevoir les 2 Props dans Star

4 - Et les intégrer :
    - onMouseEnter={onHoverIn}
    -  onMouseLeave={onHoverOut}

5 - Modifier la condition d'affichages, en passant de :
    - ça        full={rating >= i + 1}
    - à ça      tempRating ? tempRating >= i + 1 : rating >= i + 1

6 - Penser à afficher tempRating dans le paragraphe
    - {tempRating || rating || ""}


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    PROPS  en tant qu' API
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Trop peu de Props : coté l'utilisateur
    - manque de flexibilité 
    - pourrait ne pas être utile    

Beaucoup de Props : coté codeur
    - Ajoute trop de complexité mentale
    - Difficile à utiliser
    - Difficile à écrire le code
    - Si obligatoire : fournir de bonnes valeurs par défault


Nous avons besoin de trouver le juste équilibre entre trop peu, et trop de Props,
autant pour le codeur que du l'utilisateur.


// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
    Améliorer la réutilisation avec les Props
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

Lorsqu'on appelle un Composant en JSX, on peut lui donner une Props
    <StarRating maxRating={10} />

Le Composant Enfant recevra les Props, 
MAIS il est possible de définir à cette Prop une valeur par défaut
(dans le cas où le Composant Parent ne lui aurait pas transmis cette Prop+PropValue)
    function StarRating({ maxRating = 5 })

En cas de réutilisation de ce Composant, en définissant une Prop + value au Parent
    - cela vient écraser la valeur par défaut du Composant Enfant
    - cela permet d'initialiser une valeur de State par défaut

Parfois, on peut lire qu'il ne faut pas initialiser une valeur de State avec une Props.
C'est vrai seulement si :
    - on veut qu'une valeur de State soit synchronisé avec une valeur de Props
    (en d'autre terme : qu'une variable de State s'Update quand la Prop s'update)

Ce qui n'est pas du tout le cas dans notre exemple.
Et puis, ceci était surtout vrai dans les anciennes périodes de React (avant les Hooks).