Le strict mode :
La seule chose qu'il fait, c'est que pendant le développement :

- il va render tous les composants deux fois afin de trouver certains bugs.
- React vérifiera si nous utilisons des parties obsolètes de l'API React

Donc le mode strict n'a rien de révolutionnaire,
mais c'est quand même une bonne idée de toujours l'activer
lorsque nous développons des applications React.

----------------------------------------------------------------
----------------------------------------------------------------

Utilité première d'un composant ? Réusabilité
composant = Data + Logic + Appearance

Un composant doit toujours retourner une valeur (pas de null par exemple)
Ne jamais imbriquer une déclaration de fonction elle-meme dans une autre fonction
Toujours déclarer nos composants au top level

----------------------------------------------------------------
----------------------------------------------------------------

diff decorations : astuce

React = separation of concerns
(séparation des préoccupations/intérêts)
----------------------------------------------------------------
----------------------------------------------------------------

JSX est converti en JS grace à Babel 
(via la fonction React.createElement)

----------------------------------------------------------------
----------------------------------------------------------------

CSS : class en JSX devient className
On peut soit relier un fichier CSS, soit ecrire directement un objet JS
<h1 style={ { color: "red", fontSize: "48px" } }>Fast React Pizza Co.</h1>

ou bien avec une variable 
const style = { color: "red", fontSize: "48px" };
<h1 style={style}>Fast React Pizza Co.</h1>

--------------------------------------------------------------
--------------------------------------------------------------

Les Props sont des propriétés de fonction
Elles sont comme un moyen de communication entre un parent et un enfant (composant)

Les parents définissent l'apparence et le comportement des enfants

2 étapes : 
- on envoit les props dans un composant (les parents ??)
- on récupère les props (chez les enfants??)

Tout peut être passé dans une props : 
- une valeur
- un tableau
- un objet
- une fonction
- et même d'autres composants...

Si on passe autre chose qu'une String dans une props : { }

--------------------------------------------------------------
--------------------------------------------------------------

ATTENTION : LES PROPS SONT READ-ONLY !!
SEUL LE PARENT COMPOSANT PEUT UPDATE LE PROPS

Les Props sont IMMUABLES : impossible à modifier chez l'enfant
Pourquoi ? Car ce sont des objets, et modifier un objet enfant, revient à modifier l'objet dans le parent.

Et si l'on modifie un objet situé en dehors du composant fonction ?
Cette fonction créerait un "side effect" (not pure)

REACT = pure functions !!
C'est à dire des fonctions sans "side effects" 

Voilà pourquoi les composants doivent être des fonctions pures en termes de Props et State 
-  ça optimise l'application
-  et ça évite des bugs lorsqu'on manipule de la Data externe

De manière générale : un composant ne doit pas modifier une valeur à l'extérieur de sa function scope


Pour modifier une props, on a besoin d'un STATE ()

--------------------------------------------------------------
--------------------------------------------------------------

ONE-WAY DATA FLOW : 
la Data se passe uniquement de parents vers enfants 
(en utilisant donc les props)
ET jamais l'inverse !!!!

Du haut vers le bas de l'arbre des composants

Pourquoi ?
Pour rendre l'Application :
- plus prédictible
- plus facile à comprendre
- plus facile à débugger avec beaucoup de Data...

--------------------------------------------------------------
--------------------------------------------------------------

JSX fonctionne comme le HTML,
sauf qu'on peut entrer en JS mode avec { } sur des textes ou attributs

{ } On peut y mettre des expression JS à l'interieur
        (reférence de variables, des arrays, objects, ternary...)
Mais pas de Statement (if/else, for, switch...)

On peut écrire du JSX à l'intérieur { }
Et n'importe où dans un composant (dans if/else, affectation de variable, function...)

Un élément JSX doit avoir uniquement 1 root Element (fragment <> </>)

--------------------------------------------------------------
--------------------------------------------------------------

Faire une liste grace à .map()

{data.map((element) => (
          <Component elemObject={element} key={element.name} />
        ))}

On fait un .map sur notre Data
Dans chaque boucle de .map, on aura notre composant X avec une props qui sera l'élément Data de chaque tour
Et on attribue une props key via une donnée de Data

--------------------------------------------------------------
--------------------------------------------------------------

Conditional Rendering &&

Penser à utiliser la condition, souvent non pas avec un tableau, 
mais avec la longueur d'un tableau > 0
(pour éviter certains désagréments comme un affichage du 0 si falsy)

--------------------------------------------------------------
--------------------------------------------------------------

Conditional Rendering Ternaries

Meilleur à utiliser que le && dans certaines conditions.
Il produit (return) une value, 
contrairement à if/else qui est un statement, 
et qui donc ne fonctionnera pas dans du JSX.

--------------------------------------------------------------
--------------------------------------------------------------

Conditional Rendering with Multiple Returns

Dans notre composant (function), 
en dehors du JSX, on peut effectuer des return sous conditions
(if/else)
Parfois, on veut juste return quelque chose de complétement différent,
comme un null, ou un tout autre composant, pour sortir de la fonction.

Générarement, dans du JSX, 
on utilise le return des elements JSX basés sur une condition.


--------------------------------------------------------------
--------------------------------------------------------------

Extracting JSX into a New Component

Lorsque les Composants semblent trop longs, 
il est pratique de les découper en plusieurs petits Composants.

--------------------------------------------------------------
--------------------------------------------------------------

Faire passer une variable sous forme de props (à un enfant)

Et, parfois, il y a des variables dans le Composant parent
qu'il faut passer à un autre Composant.

Pour ça, on passe la variable sous forme de props
<Component propsName={variableName}

Et pour plus de faciliter de lecture,
on peut donner le même nom de props que la variable
<Component openHour={openHour}

--------------------------------------------------------------
--------------------------------------------------------------
