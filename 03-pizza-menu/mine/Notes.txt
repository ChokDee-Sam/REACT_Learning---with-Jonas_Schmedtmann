----------------------------------------------------------------
Rendering the Root Component
----------------------------------------------------------------
// ----- React v18
import React from "react";
import ReactDOM from "react-dom/client";

function App() {
  return <h1>Hello React</h1>;
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);

// ----- React before 18
React.render(<App />)

/ ------ PS : Dans certains fichiers, WebPack s'occupe de modifier ce genre d'URL
<link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />


----------------------------------------------------------------
Le strict mode :
----------------------------------------------------------------
La seule chose qu'il fait, c'est que pendant le développement :

- il va render tous les composants deux fois afin de trouver certains bugs.
- React vérifiera si nous utilisons des parties obsolètes de l'API React

Donc le mode strict n'a rien de révolutionnaire,
mais c'est quand même une bonne idée de toujours l'activer
lorsque nous développons des applications React.


----------------------------------------------------------------
Debugging : bonnes pratiques
----------------------------------------------------------------
--- Avant de commencer
- Regarder si on a bien lancer l'App dans le navigateur (npm start)

--- En cas d'absence d'affichage dans le navigateur
- Restart l'App : control+C puis npm start
- Faire un hard reload avec le navigateur (bouton ou raccourci)

--- En cas d'erreurs
- Toujours ouvrir la console du navigateur pour voir les erreurs
- Checker le message d'erreur sur Google (App, console, etc )
- Penser à modifier l'output de la console VSCode (ESLint, Prettier, etc)


----------------------------------------------------------------
Composants : définition et utilité
----------------------------------------------------------------
Utilité première d'un composant ? Réusabilité
Comment sont-ils généralement placés ? En imbrication
Aspect clé principal : Les possibilités d'imbrications et réusabilités

Composant = Data + Logic + Appearance
La clé est de savoir "divisé" des parties de Design en Composants

Penser à créer un arbre de composants pour mieux comprendre notre "chantier"
Ça facilite la compréhension du projet, grace à :
- la hiérachisation (parent, enfant)
- les imbrications
- et comment tous les composants sont reliés entre eux


----------------------------------------------------------------
Composant : quelques règles importantes
----------------------------------------------------------------
Son nom doit toujours commencer par une majuscule

Un composant doit toujours retourner une valeur (pas de null par exemple)
À partir de 2 composants qui s'affichent, ils doivent être dans une div ou Fragment

Ne pas imbriquer une déclaration de fonction qui elle-meme dans une autre fonction.
Toujours déclarer nos composants au top level


----------------------------------------------------------------
Astuce Ne pas voir les lignes de modifications
----------------------------------------------------------------
Paramètres VSCode > diff decorations > None


----------------------------------------------------------------
JSX : c'est quoi ?
----------------------------------------------------------------
C'est une "extension" de JavaScript
Permet d'embarquer du JS, du CSS, et du React Composant en HTML

Synthaxe declarative pour décrire :
- à quoi ressemblera le composant 
- comment il fonctionnera

C'est le composant qui return le block JSX.


----------------------------------------------------------------
JSX : la conversion de Babel nous simplifie la vie !
----------------------------------------------------------------
JSX est converti en JS grace à Babel 
via l'appel de fonction React.createElement()

Le nom des composants n'apparait pas dans le fichier HTML final
On y voit uniquement ce qu'il y a à l'intérieur

PS : on pourrait utiliser React sans JSX
Mais on perdrait :
- du temps à écrire des createElement
- ainsi que de la lisibilité

Comparaison indiscutable qui montre la différence :
        Return <Footer> We are open </Footer>
        return React.createElement("footer", null, "We are open")

----------------------------------------------------------------
L'approche IMPERATIVE de JavaScript
----------------------------------------------------------------
En JavaScript, on manipule directement le DOM
L'idée est que la manipulation du Dom est une suite d'étape bien ordonnée
afin de manuellement créer/modifier des éléments, puis de les placer

Une approche Imperative : 
- On indique manuellement chaque étape step by step de la manipulation du DOM
- Ces étapes modifieront toute notre UI

Pour résumer l'approche JavaScript :
- On utilise la manipulation du DOM, étape par étape,
pour dire exactement 'comment' réaliser les choses


----------------------------------------------------------------
L'approche DECLARATIVE de React
----------------------------------------------------------------
En React, on ne manipule JAMAIS le DOM directement
L'idée est que l'UI est la reflection de la Data Actuelle (props,state)
Et que cette Data laisse React automatiquement synchroniser l'UI avec celle-ci

Une approche déclarative : 
- On utilise JSX pour dire à React ce qu'on souhaite voir sur l'écran
- Et ce sont les Data qui iront manipuler le DOM, pas nous

La simplicité : 
- On utilise le JSX en 'posant' des Data pour dire ce qu'on voit à l'écran
- Et c'est tout !

Car : 
- React laissera ces Data se modifier automatiquement sous certaines conditions
- Ces conditions laisseront les Data modifier le DOM
- Cette modification du DOM génerera un nouveau rendu sur l'UI

Pour résumer l'approche de React :
- On utilise le JSX pour dire à React ce qu'on souhaite voir sur notre écran
- Mais pas comment l'accomplir, de manière précise (step by step)


----------------------------------------------------------------
Le Mode JavaScript dans notre JSX
----------------------------------------------------------------
Permet de combiner le JavaScript dans notre HTML

Comment ?
- Juste en mettant une expression JavaScript entre les accolades

Exemple :
<h1>{new Date().toLocaleDateString()} We are open</div>


----------------------------------------------------------------
React = separation of concerns
---------------------------------------------------------------
(séparation des préoccupations/intérêts)

Avant, sans React :
- 1 fichier par langage (HTML / CSS / JavaScript)

Avec React :
- 1 fichier par composant (Menu / Footer / Titre / etc...)

Avantages :
- Facilité de lecture, car fichiers moins longs
- Facilité de modification, car plus localisée
- Moins de bugs, car chaque élément est très ciblé
- Plus simple à debugger
- Donc facilement maintenable sur la durée


----------------------------------------------------------------
CSS
----------------------------------------------------------------
En JSX, on utilise un objet JS pour le inline-style
Et donc, pour écrire du JS, on doit entrer en mode JS { }
puis encore avec une double accolade, pour créer un objet {{ }}
MAIS, pour l'interet de la "separation of concerns", on oublie...

CSS : class en JSX devient className
On peut soit relier un fichier CSS, soit ecrire directement un objet JS
<h1 style={ { color: "red", fontSize: "48px" } }>Fast React Pizza Co.</h1>

Ou bien avec une variable (mais pas recommandé sur des vrais projets...)
const style = { color: "red", fontSize: "48px" };
<h1 style={style}>Fast React Pizza Co.</h1>

PS : Attention au camelCase pour notre CSS dans du JS

--------------------------------------------------------------
PROPS
--------------------------------------------------------------
Les Props sont des arguments de fonction (d'objets)
Elles sont comme un moyen de communication entre un parent et un enfant (composant)

Les parents définissent l'apparence et le comportement des enfants

2 étapes : 
- on définit les props dans un composant Parent (les noms des propriétés + valeurs)
- on récupère les props dans le composant Enfant (uniquement les noms des propriétés)

Tout peut être passé dans une props : 
- une valeur
- un tableau
- un objet
- une fonction
- et même d'autres composants...

Si on passe autre chose qu'une String dans une props : { }
exemple : permet de mettre un nombre dans le composant parent
        price={10}
 et d'ajouter, par exemple, +3 dans le composant enfant
      <span>{props.price + 3}</span>


--------------------------------------------------------------
ATTENTION : LES PROPS SONT READ-ONLY !!
--------------------------------------------------------------
SEUL LE PARENT COMPOSANT PEUT UPDATE LE PROPS

Les Props sont IMMUABLES : impossible à modifier chez l'enfant
Pourquoi ? Car ce sont des objets, et modifier un objet enfant, revient à modifier l'objet dans le parent.

Et si l'on modifie un objet situé en dehors du composant fonction ?
Cette fonction créerait un "side effect" (not pure)

REACT = pure functions !!
C'est à dire des fonctions sans "side effects" 

Voilà pourquoi les composants doivent être des fonctions pures en termes de Props et State 
-  ça optimise l'application
-  et ça évite des bugs lorsqu'on manipule de la Data externe

De manière générale : un composant ne doit pas modifier une valeur à l'extérieur de sa function scope !

Pour modifier une props, on a besoin d'un STATE ()


--------------------------------------------------------------
ONE-WAY DATA FLOW : 
--------------------------------------------------------------
La Data se passe uniquement de parents vers enfants 
(en utilisant donc les props)
ET jamais l'inverse !!!!

Du haut vers le bas de l'arbre des composants

Pourquoi ?
Pour rendre l'Application :
- plus prédictible
- plus facile à comprendre
- plus facile à débugger avec beaucoup de Data...


--------------------------------------------------------------
JSX : quelques infos
--------------------------------------------------------------
JSX fonctionne comme le HTML, sauf qu'avec des accolades { }

- On peut entrer en JS mode avec { } sur des textes ou attributs

- On peut y mettre des expression JS à l'interieur de { }
        (reférence de variables, des arrays, objects, ternary...)
                Mais pas de Statement (if/else, for, switch...)

- et on peut même écrire du JSX à l'intérieur
Et n'importe où dans un composant (dans if/else, affectation de variable, function...)

PS : Un élément JSX doit avoir uniquement 1 root Element (fragment <> </>)


--------------------------------------------------------------
Liste avec .map()
--------------------------------------------------------------
Faire une liste grace à .map()

{data.map((element) => (
          <Component elemObject={element} key={element.name} />
        ))}

Dans chaque boucle de .map:
- la boucle s'effectuera autant de fois que la longueur du tableau
- et à chaque passage de boucle, 
        on effectuera la fonction flêchée sur l'élément du tableau en question

Donc, dans cette fonction flechée .map, 
à chaque tour de boucle, on aura un nouveau composant avec 2 props 
- une Props qui aura pour valeur l'élément (complet) du tableau
- Et une autre Props qui sera la valeur de l'element.name

Ce qui donnera plusieurs composant
dont chacun aura un element en entier, ainsi que son nom 


--------------------------------------------------------------
Liste : Props parents inutiles ? Place à l'argument de fonction
--------------------------------------------------------------
Dans le Composant Parent : 
        Plutôt que d'écrire chaque Props avec sa valeur
        on définit une Props qui récupère la propriété de fonction

 {pizzaData.map((element) => (
          <Pizza pizzaObject={element} />
        ))}


Et dans le Composant Enfant :
        On ajoute simplement le nom de la Props parent
        Puis on y ajoute la propriété d'object dans la Props d'objet

<div className="pizza">
      <h3>{props.pizzaObject.name}</h3>
</div>


--------------------------------------------------------------
Liste : la Props Key unique
--------------------------------------------------------------
Dans notre fonction .map(), mettre une Props key unique

{pizzaData.map((element) => (
          <Pizza pizzaObject={element} key={element.name} />
))}


--------------------------------------------------------------
Conditional Rendering &&
--------------------------------------------------------------
Penser à utiliser la condition, non pas avec un tableau, 
mais avec la longueur d'un tableau > 0
(pour éviter certains désagréments comme un affichage du 0 si falsy)

Préferez une condition true or false très claire, ou une ternaire
        {numPizzas > 0 
                && (........)}


--------------------------------------------------------------
Conditional Rendering Ternaries
--------------------------------------------------------------
Meilleur à utiliser que le && dans certaines conditions.
Il produit (return) une value.

contrairement à if/else qui est un statement, 
et qui donc ne fonctionnera pas dans du JSX


--------------------------------------------------------------
Conditional Rendering with Multiple Returns
--------------------------------------------------------------
Dans notre composant (function), 
en dehors du JSX, on peut effectuer des return sous conditions
(if/else)

En gros, on peut utiliser des if/else dans la fonction Composant
et si X condition, on peut définir un return anticipé.

Pas vraiment utile pour des petits bouts de code
Mais utile pour return un Composant en entier par exemple

Parfois, on veut juste return quelque chose de complétement différent,
comme un null, ou un tout autre composant, pour sortir de la fonction.

Générarement, dans du JSX, 
on utilise le return des elements JSX basés sur une condition.


--------------------------------------------------------------
--------------------------------------------------------------

Extracting JSX into a New Component

Lorsque les Composants semblent trop longs, 
il est pratique de les découper en plusieurs petits Composants.


--------------------------------------------------------------
--------------------------------------------------------------

Faire passer une variable sous forme de props (à un enfant)

Et, parfois, il y a des variables dans le Composant parent
qu'il faut passer à un autre Composant.

Pour ça, on passe la variable sous forme de props
<Component propsName={variableName}

Et pour plus de faciliter de lecture,
on peut donner le même nom de props que la variable
<Component openHour={openHour}


--------------------------------------------------------------
--------------------------------------------------------------

Destructuring Props

function sansPropsDestructuring (props)
function avecPropsDestructuring ({nomDeProps_1, nomDeProps_2})

On utilise le destructuring pour plus de simplicité.
Et dans notre JSX, on passe de {props.nomDeProps} à {nomDeProps}


--------------------------------------------------------------
--------------------------------------------------------------

Fragments

Permet d'avoir plus d'un seul élément de JSX dans le code (cote à cote)
Ne laisse aucune trace dans le DOM

Si on souhaite y mettre une key 
<React.Fragment key={nomDeKey}>
</React.Fragment>
Et ne pas oublier d'import React from 'react'

Sinon, un fragment vide suffit :
<>
</>


--------------------------------------------------------------
--------------------------------------------------------------

Setting Classes and Text Conditionally

Pour une condition de Classes :
Mode JS > template literal > ternaire
        <li className={`pizza ${pizzaObj.soldOut ? "sold-out" : ""}`}>

Pour une condition de texte :
Mode JS {} > Ternaire
        <span>{pizzaObj.soldOut ? "SOLD OUT" : pizzaObj.price}</span>


--------------------------------------------------------------
--------------------------------------------------------------
